<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="">
    <meta name="author" content="">
    

    <title>Visualisation annotation </title>

   	<!--
    <link href="../dist/css/bootstrap.min.css" rel="stylesheet"> 
    <link href="../dist/css/bootstrap-theme.min.css" rel="stylesheet">
    <link href="../assets/css/ie10-viewport-bug-workaround.css" rel="stylesheet">
  	-->
		<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
		<script type="text/javascript" src="http://d3js.org/d3.v3.min.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
		
		<script src="https://cdn.socket.io/socket.io-1.4.5.js"></script>
		<script src="/socket.io/socket.io.js"></script>
		
    <!-- Custom styles for this template -->
   <!-- <link href="theme.css" rel="stylesheet"> -->


    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->

		<script>
	
		$(function(){
			var WIDTH = 2480;//900; // taille réel du document
			var HEIGHT = 3509;//1100; // taille reel du document
			var WIDTHDOC = 900;
			var HEIGHTDOC = 1100;
			var pair = false;
			var tableImg = new Array();
			var CheminComplet = document.location.href;
			var NomDuFichier = CheminComplet.substring(CheminComplet.lastIndexOf( "/" )+1 );// nom de l'utilisateur
      var iosocket = io.connect();
			iosocket.emit('askAnnotation',NomDuFichier); // On demande les annotations relatif à un nom
      iosocket.on('resultAnnotation', function(rows){ // On recupère les données
      var nest = d3.nest()
				.key(function(d) { return d.time; })
				.entries(rows);// on tri en fonction du temps (sa pourrait être en fonction de la page)
				//console.log(nest);
				
			for (var eachDay = 0; eachDay<nest.length; eachDay++){
				var temp = nest[eachDay]["values"];
				for (var eachRow = 0; eachRow<temp.length; eachRow++){
				
					cutImageUp(temp[eachRow]);
				}
			}
	
		});  
		//fonction de création d'image. On alloue de la mémoire si l'image n'est pas déjà existante. temps -- mais mémoire ++
		function searchExistImg(src){
			for (var i =0; i<tableImg.length;i++){
				if (tableImg[i].src == src ){
					return tableImg[i];
				}
			}
			var image = document.createElement("img");
			image.src = src;
			image.width = WIDTH;
			image.height = HEIGHT;
			tableImg.push(image);
			return image;
		
		} 
		
		//fonction qui va créer le cadre + le texte correspondant. Il prend en entrée une des annotations reçu du serveur
		function cutImageUp(annotation) {
				
				var parent = document.getElementById("body1");
			
				
				var canvas = document.createElement('canvas');
				var conteneur = document.createElement('div');
				var label = document.createElement('label');
				label.innerHTML = annotation["text"] + "\n"+ annotation["emotion"];
				conteneur.appendChild(canvas);
				conteneur.appendChild(document.createElement('br'));
					conteneur.appendChild(label);
				if(pair){
					
					pair = false;
					conteneur.align="right";
					
				}else{
					
					pair = true;
					
					
				}
				
				parent.appendChild(conteneur);
				parent.appendChild(document.createElement('br'));
				
				canvas.width = annotation["width"] * WIDTHDOC; //900/2480 ImageAnnotation/ImageTailleReelle
				canvas.height = annotation["height"] * HEIGHTDOC; // 1100/3509 idem, c'est pour resize le resultat
				canvas.style.border = "1px solid black";
				var context = canvas.getContext('2d');
				
				context.drawImage(searchExistImg(annotation["src"]), annotation["x"]*WIDTH, annotation["y"] *HEIGHT, annotation["width"]*WIDTH, annotation["height"] *HEIGHT, 0, 0, canvas.width, canvas.height);

				//imagePieces.push(canvas.toDataUrl("images/jpg"));
				//canvas.style.margin = "8px";

			// imagePieces now contains data urls of all the pieces of the image

			// load one piece onto the page

			}
     });
    
    
    </script>
    
    
    <body>
    	<div id="body1">
    		<h2>Liste des annotation de la personne :</h2>
    		
	  	</div>
	  	
	  	
    
    
    </body>
    
   	<script>
   	/* first version
   	function cutImageUp(annotation) {
				
				var parent = document.getElementById("body1");
			
				
				var canvas = document.createElement('canvas');
				var conteneur = document.createElement('div');
				var label = document.createElement('label');
				label.innerHTML = annotation["text"] + "\n"+ annotation["emotion"];
				
				if(pair){
					conteneur.appendChild(label);
					conteneur.appendChild(canvas);
					pair = false;
					conteneur.align="right";
					console.log(pair);
				}else{
					conteneur.appendChild(canvas);
					conteneur.appendChild(label);
					pair = true;
					console.log(pair);
					
				}
				
				parent.appendChild(conteneur);
				parent.appendChild(document.createElement('br'));
				
				canvas.width = annotation["width"] * WIDTH * 0.36290; //900/2480 ImageAnnotation/ImageTailleReelle
				canvas.height = annotation["height"] * HEIGHT *0.31347; // 1100/3509 idem, c'est pour resize le resultat
				canvas.style.border = "1px solid black";
				var context = canvas.getContext('2d');
				
				context.drawImage(searchExistImg(annotation["src"]), annotation["x"]*WIDTH, annotation["y"] *HEIGHT, annotation["width"]*WIDTH, annotation["height"] *HEIGHT, 0, 0, canvas.width, canvas.height);

				//imagePieces.push(canvas.toDataUrl("images/jpg"));
				//canvas.style.margin = "8px";

			// imagePieces now contains data urls of all the pieces of the image

			// load one piece onto the page

			}
     });*/
   	
   	</script> 
