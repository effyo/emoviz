<html>
  <head>
    <meta charset="utf-8">
    
    <script type="text/javascript" src="/public/Annotation/annotorious/annotorious.min.js"></script>
		<script src="https://cdn.socket.io/socket.io-1.4.5.js"></script>
		<script src="/socket.io/socket.io.js"></script>
    <script src="http://code.jquery.com/jquery-1.10.2.js"></script>
    <script src="http://code.jquery.com/ui/1.10.4/jquery-ui.js"></script>
		<script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>
		<script src="/public/Annotation/AnnotationFonction.js"></script>
		
		<!--CSS-->
		<link rel="stylesheet" type="text/css" href="/public/Annotation/CSS/annotationCSS.css">
		<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css">
		<link rel="stylesheet" type="text/css" href="/public/Annotation/annotorious/css/theme-dark/annotorious-dark.css" />
		<link href="http://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css" rel="stylesheet">
		
		
		
  </head>
  <body  >
  	<button onclick="refresh()">Rafraîchir la page </button>
    <button onclick="changePageClasse()"> Version Classe </button>
    <button onclick="changePageSolo()"> Version Perso </button>
    <div id="mySpace"></div>
    
    
    
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
  </body>
  
  <script>
  
  var parent = document.getElementById("mySpace");
	initDocument(parent);
  
  
  jQuery.noConflict();
  $(function(){
  			
    var iosocket = io.connect();
    iosocket.emit('changePage', new Array("General",new Date(), NomDuFichier));
    iosocket.emit('askInit',"Bonjour" ); // Demande au serveur les annotations
    //Init annotation
    iosocket.on('answerInit', function(rows){// Réponse du serveur pour l'init
			
			var result = document.getElementById('result');
			
			for (var eachRow =0; eachRow<rows.length; eachRow++){
				createAnnotation(rows[eachRow]); //initialisation de la page
			}
		});
		//////////////////////////////////////////////////////////////////
		
		//function that react to the server
		/////////////////////////////////////////////////////////////////
    iosocket.on('annotationMessageClient', function(rows){// catch then a new annotation is coming (from another user)
				createAnnotation(rows);
			
		});
		iosocket.on('deleteAnnotationClient', function(rows){// catch then a annotation is deleted (by another user)
			anno.removeAnnotation(valueGlob[rows][0]);// enleve l'annotation
			valueGlob[rows][1].parentNode.removeChild(valueGlob[rows][1]); // enleve l'affichage emotionnel
			valueGlob.splice(rows, 1);// l'enleve du tableau
			
		});
		
		iosocket.on('changeAnnotationClient', function(rows){ // catch then a change is done (by another user)
		//0 => new annotation 1=> text of the old annotation
			
			changeAnnotation(rows[0],rows[1]);
		});
		//////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////
		//////////////////////handler for annotation//////////////////////
		//////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////
		
     //////////////////////////////////////////////////////////////////
		////////////////////////save annotation////////////////////////////
		///////////////////////////////////////////////////////////////////
		anno.addHandler('onAnnotationCreated', function(annotation, event) {
			var parent = event.element.parentNode;
			var temp = parent.getElementsByClassName("annotorious-editor");
			var popUp = temp[0].getElementsByClassName("myPopUp");
			var eachEmotion = popUp[0].getElementsByClassName("myImg");
			var emotionRessenti = "";
			for (var j = 0; j<eachEmotion.length; j++){
				if (eachEmotion[j].value)
					
					emotionRessenti += tabTemp[j] + "/";
			
			}
			var date = new Date();
			
			var json = { 
    								text: annotation.text, 
    								src: annotation.src,
    								height: annotation.shapes[0].geometry.height,
    								width: annotation.shapes[0].geometry.width,
    								x: annotation.shapes[0].geometry.x,
    								y:annotation.shapes[0].geometry.y,
    								login : NomDuFichier,
    								emotion : emotionRessenti,
    								time : date
 								 };
				iosocket.emit('annotationMessageServeur',json);
				
				var numberPage = (json.src).substring(json.src.length - 8, json.src.length -4 );
				var parentByAnno = document.getElementById("anno" + parseInt(numberPage));
				
				/*var myValue = popDef(parentByAnno, json, eachEmotion, (parseInt(numberPage)-1)*HEIGHT);
				//var myValue = popDef(parent, json, eachEmotion,0);
				valueGlob.push(new Array(annotation,myValue));*/
				
				var entryValue = new Array();
				entryValue.push(parentByAnno);
				entryValue.push(json);
				entryValue.push(strtok(emotionRessenti));
				entryValue.push((parseInt(numberPage)-1)*HEIGHT);
				valueGlob.push(new Array(annotation,entryValue));
				resetPopUp(temp[0].getElementsByClassName("myPopUp"));
		});
		/////////////////////////////////////////////////////////////////////////
		///////////////////////////selection handler/////////////////////////////
		/////////////////////////////////////////////////////////////////////////
		anno.addHandler('onSelectionCompleted', function(event) {
			
			
			var myClass = (event.mouseEvent.target.parentNode).getElementsByClassName("annotorious-editor");
			var firstTime = myClass[0].getElementsByClassName("myPopUp");
			if (firstTime.length==0){
				pop(pos,"myPopUp",myClass[0]);
			}
			
		});
		
		/////////////////////////////////////////////////////////////////////////
		///////////////////////////onMouseOver handler///////////////////////////
		/////////////////////////////////////////////////////////////////////////
		anno.addHandler('onMouseOverAnnotation', function(annotation, event) {
			console.log(annotation.C);
			if (typeof annotation.C == "undefined"){
				currentSelected.parentNode.removeChild(currentSelected);
				currentSelected =null;
			
			}else{
				if (currentSelected != null)
					currentSelected.parentNode.removeChild(currentSelected);
				var temp = findAnnotation(annotation.C);
				
				currentSelected = popDef(valueGlob[temp][1][0], valueGlob[temp][1][1], valueGlob[temp][1][2], valueGlob[temp][1][3]);
			
			}
		});
		
		/////////////////////////////////////////////////////////////////////////
		///////////////////////////delete handler////////////////////////////////
		/////////////////////////////////////////////////////////////////////////
		
		anno.addHandler('onAnnotationRemoved', function(annotation) {
		
		// necessaire pour eviter d'avoir du rouge apres (si selection est faite)
			var parent = event.element.parentNode;
			var temp = parent.getElementsByClassName("annotorious-editor");
			var popUp = temp[0].getElementsByClassName("myPopUp");
			resetPopUp(popUp);
		
		
			var temp = findAnnotation(annotation);
			var CheminComplet = document.location.href;
			var NomDuFichier = CheminComplet.substring(CheminComplet.lastIndexOf( "/" )+1 );
			var json = { 
    								text: annotation.text, 
    								src: annotation.src,
    								height: annotation.shapes[0].geometry.height,
    								width: annotation.shapes[0].geometry.width,
    								x: annotation.shapes[0].geometry.x,
    								y:annotation.shapes[0].geometry.y,
    								login : NomDuFichier
 								 };
 								 
 			var tab = new Array(json,temp);
				iosocket.emit('deleteAnnotationServeur',tab);
				//console.log("hello");
				//console.log(valueGlob[temp][1]);
				//valueGlob[temp][1].parentNode.removeChild(valueGlob[temp][1]); // enleve l'affichage emotionnel
				valueGlob.splice(temp, 1);

		});
		/////////////////////////////////////////////////////////////////////////
		///////////////////////////updated handler///////////////////////////////
		/////////////////////////////////////////////////////////////////////////
		anno.addHandler('onAnnotationUpdated', function(annotation) {
		
			// necessaire pour eviter d'avoir du rouge apres (si selection est faite)
			var parent = event.element.parentNode;
			var temp = parent.getElementsByClassName("annotorious-editor");
			var popUp = temp[0].getElementsByClassName("myPopUp");
			resetPopUp(popUp);
			
			
			
			var pos = findAnnotation(annotation);
			var json = { 
    								text: annotation.text, 
    								src: annotation.src,
    								height: annotation.shapes[0].geometry.height,
    								width: annotation.shapes[0].geometry.width,
    								x: annotation.shapes[0].geometry.x,
    								y:annotation.shapes[0].geometry.y,
    								login : NomDuFichier
 								 };
 								 
 				var tab = new Array(json,pos); // Necessaire pour renvoyer l'annotation a tout les utilisateurs
				iosocket.emit('changeAnnotationServeur',tab);
				
		});

				
			});
			
			
			
		
		
			
		/////////////////////////////////////////////////////////////////////////
		///////////////////////////some function/////////////////////////////////
		/////////////////////////////////////////////////////////////////////////
	
	
		
			
		
		function changePageClasse(){
			document.location.reload();
		}
		function changePageSolo(){
			var blabla = CheminComplet.substring(0, listPos[listPos.length-3]+1 )+
													"Solo"+
													CheminComplet.substring(listPos[listPos.length-2], listPos[listPos.length] );
			this.location.href = blabla;
		}
		
		
		function createAnnotation(entry){
			var tempSrc = entry.src.substring(0, entry.src.lastIndexOf('/'));
			var tempChem = CheminComplet.substring(0,CheminComplet.lastIndexOf('/'));
			
			if (tempSrc.substring(tempSrc.lastIndexOf('/'),tempSrc.length) == tempChem.substring(tempChem.lastIndexOf('/'),tempChem.length)){
				var lock = false;
				
		
				var myAnnotation = {
					/** The URL of the image where the annotation should go **/
					src : entry.src,

					/** The annotation text **/
					text : entry.text,
				
					editable : lock , 

					/** The annotation shape **/
					shapes : [{
						/** The shape type **/
						type : 'rect',

						/** The shape geometry (relative coordinates) **/
						geometry : { x : entry.x, y: entry.y, width : entry.width, height: entry.height }
					}]
				} 
				var numberPage = (entry.src).substring(entry.src.length - 8, entry.src.length -4 );
				var parent = document.getElementById("anno" + parseInt(numberPage));
				
				var eachEmotion = strtok(entry.emotion);
			
				//var myValue = popDef(parent, entry, eachEmotion, (parseInt(numberPage)-1)*HEIGHT);
				var entryValue = new Array();
				entryValue.push(parent);
				entryValue.push(entry);
				entryValue.push(eachEmotion);
				entryValue.push((parseInt(numberPage)-1)*HEIGHT);
				valueGlob.push(new Array(myAnnotation,entryValue));
			
				anno.addAnnotation(myAnnotation);
			}
			
		}
	
		
	</script>
	
	
	
</html>
